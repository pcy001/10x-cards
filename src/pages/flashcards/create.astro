---
import MainLayout from "@/layouts/MainLayout.astro";

// Check if user is logged in
const supabase = Astro.locals.supabase;
const {
  data: { session },
} = await supabase.auth.getSession();

// If user is not logged in, redirect to login page
if (!session) {
  return Astro.redirect("/login");
}
---

<MainLayout title="Dodaj nową fiszkę | 10xCards">
  <div class="container mx-auto p-6 max-w-2xl">
    <div class="mb-6">
      <h1 class="text-2xl font-bold mb-2">Dodaj nową fiszkę</h1>
      <p class="text-muted-foreground">
        Utwórz fiszkę, wprowadzając jej przód i tył, aby rozpocząć naukę.
      </p>
    </div>

    <div class="bg-card border rounded-lg p-6 shadow-sm">
      <p class="text-gray-600 mb-6">
        Wprowadź treść przodu i tyłu fiszki. Przód powinien zawierać pytanie lub termin do nauki,
        a tył odpowiedź lub definicję.
      </p>
      
      <form id="flashcard-form">
        <div class="space-y-2 mb-6">
          <label for="front_content" class="block text-sm font-medium">
            Przód fiszki <span class="text-red-500">*</span>
          </label>
          <textarea
            id="front_content"
            name="front_content"
            rows="5"
            class="w-full p-3 border rounded-md resize-none"
            placeholder="Wpisz treść przodu fiszki (np. pytanie, termin do nauki)"
          ></textarea>
          <div class="flex justify-between items-center">
            <p id="front_error" class="text-sm text-red-500 hidden"></p>
            <span id="front_counter" class="text-xs text-gray-500">0/500 znaków</span>
          </div>
        </div>
        
        <div class="space-y-2 mb-8">
          <label for="back_content" class="block text-sm font-medium">
            Tył fiszki <span class="text-red-500">*</span>
          </label>
          <textarea
            id="back_content"
            name="back_content"
            rows="5"
            class="w-full p-3 border rounded-md resize-none"
            placeholder="Wpisz treść tyłu fiszki (np. odpowiedź, definicja)"
          ></textarea>
          <div class="flex justify-between items-center">
            <p id="back_error" class="text-sm text-red-500 hidden"></p>
            <span id="back_counter" class="text-xs text-gray-500">0/200 znaków</span>
          </div>
        </div>
        
        <div id="api_error" class="bg-red-50 text-red-600 p-4 rounded-lg border border-red-200 mb-6 hidden">
          <p class="font-medium">Wystąpił błąd podczas zapisywania fiszki.</p>
          <p id="api_error_message"></p>
        </div>
        
        <div class="flex justify-end space-x-4 pt-2">
          <a
            href="/flashcards"
            class="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2"
          >
            Anuluj
          </a>
          <button
            type="submit"
            id="submit-button"
            class="px-4 py-2 bg-primary text-white rounded-md hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2"
          >
            Zapisz fiszkę
          </button>
        </div>
      </form>
    </div>
  </div>
</MainLayout>

<script>
  // Elements
  const form = document.getElementById('flashcard-form');
  const frontContent = document.getElementById('front_content');
  const backContent = document.getElementById('back_content');
  const frontCounter = document.getElementById('front_counter');
  const backCounter = document.getElementById('back_counter');
  const frontError = document.getElementById('front_error');
  const backError = document.getElementById('back_error');
  const apiError = document.getElementById('api_error');
  const apiErrorMessage = document.getElementById('api_error_message');
  const submitButton = document.getElementById('submit-button');

  // Character counter function
  function updateCharCounter(element, counter, max) {
    const currentLength = element.value.length;
    counter.textContent = `${currentLength}/${max} znaków`;
    
    if (currentLength > max * 0.8 && currentLength <= max) {
      counter.className = 'text-xs text-amber-500';
    } else if (currentLength > max) {
      counter.className = 'text-xs text-red-500';
    } else {
      counter.className = 'text-xs text-gray-500';
    }
  }

  // Validation function
  function validate() {
    let isValid = true;
    
    // Reset errors
    frontError.classList.add('hidden');
    backError.classList.add('hidden');
    
    // Front content validation
    if (!frontContent.value.trim()) {
      frontError.textContent = 'Przód fiszki jest wymagany';
      frontError.classList.remove('hidden');
      isValid = false;
    } else if (frontContent.value.length > 500) {
      frontError.textContent = 'Maksymalna długość to 500 znaków';
      frontError.classList.remove('hidden');
      isValid = false;
    }
    
    // Back content validation
    if (!backContent.value.trim()) {
      backError.textContent = 'Tył fiszki jest wymagany';
      backError.classList.remove('hidden');
      isValid = false;
    } else if (backContent.value.length > 200) {
      backError.textContent = 'Maksymalna długość to 200 znaków';
      backError.classList.remove('hidden');
      isValid = false;
    }
    
    return isValid;
  }

  // Update character counters on input
  frontContent.addEventListener('input', () => {
    updateCharCounter(frontContent, frontCounter, 500);
    
    // Clear error when typing
    if (frontContent.value.trim()) {
      frontError.classList.add('hidden');
    }
  });

  backContent.addEventListener('input', () => {
    updateCharCounter(backContent, backCounter, 200);
    
    // Clear error when typing
    if (backContent.value.trim()) {
      backError.classList.add('hidden');
    }
  });

  // Form submission
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    // Hide previous API error
    apiError.classList.add('hidden');
    
    // Validate form
    if (!validate()) {
      return;
    }
    
    // Disable submit button and show loading state
    submitButton.disabled = true;
    submitButton.textContent = 'Zapisywanie...';
    
    try {
      // Send request to API
      const response = await fetch('/api/flashcards', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          front_content: frontContent.value.trim(),
          back_content: backContent.value.trim(),
        }),
      });
      
      // Handle response
      if (!response.ok) {
        const data = await response.json();
        throw new Error(data.error || 'Wystąpił błąd podczas zapisywania fiszki');
      }
      
      // Success - redirect to flashcards list with success message
      sessionStorage.setItem('flashcardCreated', 'true');
      window.location.href = '/flashcards';
    } catch (error) {
      console.error('Error creating flashcard:', error);
      
      // Show API error
      apiErrorMessage.textContent = error.message;
      apiError.classList.remove('hidden');
      
      // Scroll to error
      apiError.scrollIntoView({ behavior: 'smooth', block: 'center' });
    } finally {
      // Re-enable submit button
      submitButton.disabled = false;
      submitButton.textContent = 'Zapisz fiszkę';
    }
  });
  
  // Initialize character counters
  updateCharCounter(frontContent, frontCounter, 500);
  updateCharCounter(backContent, backCounter, 200);
</script> 