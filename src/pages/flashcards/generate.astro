---
import MainLayout from "@/layouts/MainLayout.astro";
---

<MainLayout title="Generator Fiszek | 10xCards">
  <div class="container mx-auto p-6 max-w-4xl">
    <div class="mb-6">
      <h1 class="text-2xl font-bold mb-2">Generator Fiszek</h1>
      <p class="text-muted-foreground">
        Wklej dowolny tekst, a AI wygeneruje dla Ciebie fiszki do nauki.
      </p>
    </div>

    <div class="bg-card border rounded-lg p-6 shadow-sm">
      <form id="generator-form">
        <div class="mb-6">
          <label for="source-text" class="block text-sm font-medium mb-2">
            Tekst źródłowy
          </label>
          <textarea
            id="source-text"
            rows="8"
            class="w-full p-3 border rounded-md resize-none"
            placeholder="Wklej tutaj tekst źródłowy (do 10 000 znaków)..."
          ></textarea>
          <div class="mt-1 text-xs text-muted-foreground flex justify-between">
            <span>Minimum 50 znaków</span>
            <span id="char-count">0/10000</span>
          </div>
        </div>

        <div class="mb-6">
          <label for="target-language" class="block text-sm font-medium mb-2">
            Język docelowy
          </label>
          <select
            id="target-language"
            class="w-full p-3 border rounded-md bg-background"
          >
            <option value="" disabled selected>Wybierz język...</option>
            <option value="en">Angielski</option>
            <option value="pl">Polski</option>
            <option value="es">Hiszpański</option>
            <option value="de">Niemiecki</option>
            <option value="fr">Francuski</option>
          </select>
        </div>

        <button
          type="submit"
          id="generate-button"
          class="w-full bg-primary text-white font-medium py-2 px-4 rounded-md hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2"
        >
          Generuj fiszki
        </button>
      </form>
    </div>

    <div class="mt-8 hidden" id="results-section">
      <h2 class="text-xl font-bold mb-4">Wygenerowane fiszki</h2>
      
      <div class="bg-card border rounded-lg p-6 shadow-sm">
        <div class="mb-4 flex justify-between items-center">
          <div>
            <span class="text-sm font-medium">Znaleziono <span id="flashcard-count">0</span> fiszek</span>
          </div>
          <div class="flex gap-2">
            <button id="select-all" class="text-sm text-primary">Zaznacz wszystkie</button>
            <button id="deselect-all" class="text-sm text-muted-foreground">Odznacz wszystkie</button>
          </div>
        </div>
        
        <div id="flashcards-container" class="space-y-4 mb-6">
          <!-- Tutaj będą generowane fiszki -->
        </div>
        
        <button
          id="save-button"
          class="w-full bg-primary text-white font-medium py-2 px-4 rounded-md hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2"
        >
          Zapisz zaznaczone fiszki
        </button>
      </div>
    </div>
  </div>
</MainLayout>

<script>
  // Licznik znaków
  const sourceText = document.getElementById('source-text');
  const charCount = document.getElementById('char-count');
  const generateButton = document.getElementById('generate-button');
  const targetLanguage = document.getElementById('target-language');
  const resultsSection = document.getElementById('results-section');
  const flashcardsContainer = document.getElementById('flashcards-container');
  const selectAllButton = document.getElementById('select-all');
  const deselectAllButton = document.getElementById('deselect-all');
  const saveButton = document.getElementById('save-button');
  const flashcardCountSpan = document.getElementById('flashcard-count');
  
  let generatedFlashcards = [];
  
  // Aktualizacja licznika znaków
  sourceText.addEventListener('input', () => {
    const count = sourceText.value.length;
    charCount.textContent = `${count}/10000`;
    
    // Zmiana koloru, jeśli przekroczono limit
    if (count > 10000) {
      charCount.classList.add('text-red-500');
      charCount.classList.remove('text-muted-foreground');
    } else {
      charCount.classList.remove('text-red-500');
      charCount.classList.add('text-muted-foreground');
    }
  });
  
  // Obsługa formularza
  document.getElementById('generator-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const text = sourceText.value;
    const language = targetLanguage.value;
    
    // Walidacja
    if (text.length < 50) {
      alert('Tekst źródłowy musi mieć co najmniej 50 znaków');
      return;
    }
    
    if (text.length > 10000) {
      alert('Tekst źródłowy nie może przekraczać 10000 znaków');
      return;
    }
    
    if (!language) {
      alert('Wybierz język docelowy');
      return;
    }
    
    // Zmiana przycisku na stan ładowania
    generateButton.disabled = true;
    generateButton.textContent = 'Generowanie...';
    
    try {
      // Wysłanie żądania do API
      const response = await fetch('/api/flashcards/generate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          source_text: text,
          target_language: language
        })
      });
      
      if (!response.ok) {
        throw new Error(`Błąd: ${response.status}`);
      }
      
      const data = await response.json();
      generatedFlashcards = data.flashcards.map((f, idx) => ({ 
        ...f, 
        temp_id: idx.toString(),
        selected: true 
      }));
      
      // Wyświetlenie wyników
      renderFlashcards();
      resultsSection.classList.remove('hidden');
      flashcardCountSpan.textContent = generatedFlashcards.length;
      
      // Przewinięcie do wyników
      resultsSection.scrollIntoView({ behavior: 'smooth' });
    } catch (error) {
      console.error('Błąd generowania fiszek:', error);
      alert('Wystąpił błąd podczas generowania fiszek. Spróbuj ponownie.');
    } finally {
      // Przywrócenie przycisku
      generateButton.disabled = false;
      generateButton.textContent = 'Generuj fiszki';
    }
  });
  
  // Renderowanie fiszek
  function renderFlashcards() {
    flashcardsContainer.innerHTML = '';
    
    generatedFlashcards.forEach(flashcard => {
      const card = document.createElement('div');
      card.className = 'border rounded-md p-4';
      card.dataset.id = flashcard.temp_id;
      
      if (flashcard.selected) {
        card.classList.add('border-primary', 'bg-primary/5');
      }
      
      card.innerHTML = `
        <div class="flex items-start gap-3">
          <input 
            type="checkbox" 
            id="flashcard-${flashcard.temp_id}" 
            class="mt-1" 
            ${flashcard.selected ? 'checked' : ''}
          />
          <div class="flex-1">
            <div class="font-medium">${flashcard.front_content}</div>
            <div class="text-muted-foreground mt-2">${flashcard.back_content}</div>
          </div>
        </div>
      `;
      
      // Obsługa kliknięcia na checkbox
      const checkbox = card.querySelector('input[type="checkbox"]');
      checkbox.addEventListener('change', () => {
        const idx = generatedFlashcards.findIndex(f => f.temp_id === flashcard.temp_id);
        if (idx !== -1) {
          generatedFlashcards[idx].selected = checkbox.checked;
          
          if (checkbox.checked) {
            card.classList.add('border-primary', 'bg-primary/5');
          } else {
            card.classList.remove('border-primary', 'bg-primary/5');
          }
        }
      });
      
      flashcardsContainer.appendChild(card);
    });
  }
  
  // Zaznacz wszystkie
  selectAllButton.addEventListener('click', () => {
    generatedFlashcards = generatedFlashcards.map(f => ({ ...f, selected: true }));
    renderFlashcards();
  });
  
  // Odznacz wszystkie
  deselectAllButton.addEventListener('click', () => {
    generatedFlashcards = generatedFlashcards.map(f => ({ ...f, selected: false }));
    renderFlashcards();
  });
  
  // Zapisz zaznaczone
  saveButton.addEventListener('click', async () => {
    const selectedFlashcards = generatedFlashcards.filter(f => f.selected);
    
    if (selectedFlashcards.length === 0) {
      alert('Nie wybrano żadnych fiszek do zapisania');
      return;
    }
    
    saveButton.disabled = true;
    saveButton.textContent = 'Zapisywanie...';
    
    try {
      // Przygotowanie danych
      const flashcardsToSave = selectedFlashcards.map(f => ({
        front_content: f.front_content,
        back_content: f.back_content,
        is_ai_generated: true
      }));
      
      // Wysłanie żądania
      const response = await fetch('/api/flashcards/accept', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          flashcards: flashcardsToSave
        })
      });
      
      if (!response.ok) {
        throw new Error(`Błąd: ${response.status}`);
      }
      
      // Sukces
      alert('Fiszki zostały zapisane!');
      window.location.href = '/flashcards';
    } catch (error) {
      console.error('Błąd zapisywania fiszek:', error);
      alert('Wystąpił błąd podczas zapisywania fiszek. Spróbuj ponownie.');
    } finally {
      saveButton.disabled = false;
      saveButton.textContent = 'Zapisz zaznaczone fiszki';
    }
  });
</script> 